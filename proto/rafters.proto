syntax = "proto3";
package raftkv;

service FrontEnd {
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
    rpc StartRaft(IntegerArg) returns (Reply){};
}

service KeyValueStore {
    rpc GetState(Empty) returns (State) {};
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};

    rpc RequestVote (VoteRequest) returns (VoteResponse);
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
}

message Empty {}

message State {
    int32 term = 1;
    bool isLeader = 2;
}

message KeyValue {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
}

message IntegerArg {
    int32 arg = 1;
}

message GetKey {
    string key = 1;
    int64 ClientId = 2;
    int64 RequestId = 3;
}

message Reply {
    bool wrongLeader = 1;
    string error = 2;
    string value = 3;
}

message VoteRequest {
    int32 term = 1;
    int64 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message VoteResponse {
    int32 term = 1;
    bool voteGranted = 2;
}

enum LogCommand {
    Put = 0;
    Remove = 1;
}

message LogEntry {
    int32 term = 1;
    string key = 2;
    string value = 3;
    LogCommand command = 4;
}

message AppendEntriesRequest {
    int32 term = 1;
    int64 leaderId = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    int32 leaderCommitIndex = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    int64 id = 2;
    int32 ack = 3;
    bool success = 4;
}

