syntax = "proto3";
package rafters;

service Frontend {
    rpc getState (Empty) returns (State);
    rpc startRaft (IntegerArg) returns (Empty);
    rpc addServer (IntegerArg) returns (Empty);
    rpc removeServer (IntegerArg) returns (Empty);
    rpc get (IntegerArg) returns (KeyValue);
    rpc put (KeyValue) returns (Empty);
    rpc replace (KeyValue) returns (Empty);
}

service Raft {
    rpc getState (Empty) returns (State);
    rpc get (IntegerArg) returns (KeyValue);
    rpc put (KeyValue) returns (Empty);

    rpc addServer (IntegerArg) returns (Empty);
    rpc removeServer (IntegerArg) returns (Empty);
    rpc requestVote (VoteRequest) returns (VoteResponse);
    rpc appendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
}

message Empty {}

message State {
    int32 term = 1;
    bool isLeader = 2;
}

message KeyValue {
    int32 key =  1;
    string value = 2;
}

message IntegerArg {
    int32 arg = 1;
}

message VoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message VoteResponse {
    int32 term = 1;
    bool voteGranted = 2;
}

enum LogCommand {
    Put = 0;
    Remove = 1;
}

message LogEntry {
    int32 term = 1;
    int32 key = 2;
    string value = 3;
    LogCommand command = 4;
}

message AppendEntriesRequest {
    int32 term = 1;
    int32 leaderId = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    int32 leaderCommitIndex = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    int32 id = 2;
    int32 ack = 3;
    bool success = 4;
}

